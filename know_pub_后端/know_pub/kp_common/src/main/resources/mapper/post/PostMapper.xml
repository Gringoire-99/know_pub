<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace，绑定一个Mapper接口-->
<mapper namespace="com.gg.kp_common.dao.PostMapper">

    <select id="getRecommendedPosts" resultType="com.gg.kp_common.entity.vo.PostVo">
        SELECT post.id,
               post.question,
               post.question_id,
               post.content,
               post.cover,
               post.images,
               post.like_count,
               post.dislike_count,
               post.user_id,
               post.comment_count,
               COALESCE(action.liked, 0)     AS liked,
               COALESCE(action.collected, 0) AS collected,
               COALESCE(action.disliked, 0)  AS disliked,
               COALESCE(action.replied, 0)   AS replied
        FROM know_pub.post post
                 LEFT JOIN post_action action ON post.id = action.target_id AND action.user_id = #{userId}
        WHERE post.status = 0
        ORDER BY post.create_time DESC
    </select>
    <select id="getDynamic" resultType="com.gg.kp_common.entity.vo.PostVo">
        SELECT post.id,
               post.question,
               post.question_id,
               post.content,
               post.cover,
        post.images,
        post.like_count,
        post.dislike_count,
        post.user_id,
        post.comment_count,
        action.liked AS liked,
        action.collected AS collected,
        action.disliked AS disliked,
        action.replied AS replied
        FROM know_pub.post post
        RIGHT JOIN post_action action ON post.id = action.target_id AND action.user_id = #{userId}
        WHERE post.status = 0
        ORDER BY action.create_time DESC
    </select>
    <select id="getPosts" resultType="com.gg.kp_common.entity.vo.PostVo">
        SELECT post.id,
               post.question,
               post.question_id,
               post.content,
               post.cover,
               post.images,
               post.like_count,
               post.dislike_count,
               post.user_id,
               post.comment_count,
               COALESCE(action.liked, 0)     AS liked,
               COALESCE(action.collected, 0) AS collected,
               COALESCE(action.disliked, 0)  AS disliked,
               COALESCE(action.replied, 0)   AS replied
        FROM know_pub.post post
                 LEFT JOIN post_action action ON post.id = action.target_id AND action.user_id = #{userId}
        WHERE post.user_id = #{userId}
          and post.question_id = #{questionId}
          and post.status = 0
        ORDER BY post.create_time DESC
    </select>
</mapper>
